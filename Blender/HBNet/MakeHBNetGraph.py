import bpy
import math
import re
#To run: exec( compile( open( "/Users/jack/Documents/blender_workdir/hbnet_graph/make_graph.py" ).read(), "/Users/jack/Documents/blender_workdir/hbnet_graph/make_graph.py", 'exec'))

R=0.1
D=0.1
scale=2*R

nodes = []
edges = []

#circle
'''
    [0, 1.0, 0.0 ],
    [1, 0.9937122098932426, 0.11196447610330786 ],
    [2, 0.9749279121818236, 0.2225209339563144 ],
    [3, 0.9438833303083676, 0.3302790619551671 ],
    [4, 0.9009688679024191, 0.4338837391175581 ],
    [5, 0.8467241992282841, 0.5320320765153366 ],
    [6, 0.7818314824680298, 0.6234898018587335 ],
    [7, 0.7071067811865476, 0.7071067811865475 ],
	[8, 0.6234898018587336, 0.7818314824680298 ],
	[9, 0.5320320765153366, 0.8467241992282841 ],
	[10, 0.4338837391175582, 0.9009688679024191 ],
	[11, 0.3302790619551673, 0.9438833303083675 ],
	[12, 0.22252093395631445, 0.9749279121818236 ],
	[13, 0.11196447610330769, 0.9937122098932426 ],
	[14, 0, 1.0 ],
	[15, -0.11196447610330758, 0.9937122098932426 ],
	[16, -0.22252093395631434, 0.9749279121818236 ],
	[17, -0.3302790619551672, 0.9438833303083675 ],
	[18, -0.43388373911755806, 0.9009688679024191 ],
	[19, -0.5320320765153365, 0.8467241992282842 ],
	[20, -0.6234898018587335, 0.7818314824680299 ],
	[21, -0.7071067811865475, 0.7071067811865476 ],
	[22, -0.7818314824680295, 0.6234898018587339 ],
	[23, -0.8467241992282841, 0.5320320765153367 ],
	[24, -0.900968867902419, 0.43388373911755823 ],
	[25, -0.9438833303083676, 0.3302790619551672 ],
	[26, -0.9749279121818237, 0.2225209339563141 ],
	[27, -0.9937122098932426, 0.11196447610330798 ],
	[28, -1.0, 0 ],
	[29, -0.9937122098932426, -0.11196447610330773 ],
	[30, -0.9749279121818237, -0.22252093395631384 ],
	[31, -0.9438833303083676, -0.33027906195516693 ],
	[32, -0.9009688679024191, -0.433883739117558 ],
	[33, -0.8467241992282842, -0.5320320765153365 ],
	[34, -0.7818314824680296, -0.6234898018587338 ],
	[35, -0.7071067811865477, -0.7071067811865475 ],
	[36, -0.6234898018587337, -0.7818314824680297 ],
	[37, -0.5320320765153367, -0.8467241992282841 ],
	[38, -0.4338837391175583, -0.900968867902419 ],
	[39, -0.33027906195516726, -0.9438833303083675 ],
	[40, -0.2225209339563146, -0.9749279121818236 ],
	[41, -0.11196447610330804, -0.9937122098932426 ],
	[42, 0, -1.0 ],
	[43, 0.11196447610330768, -0.9937122098932426 ],
	[44, 0.22252093395631334, -0.9749279121818238 ],
	[45, 0.3302790619551669, -0.9438833303083676 ],
	[46, 0.43388373911755795, -0.9009688679024193 ],
	[47, 0.5320320765153363, -0.8467241992282842 ],
	[48, 0.6234898018587334, -0.7818314824680299 ],
	[49, 0.7071067811865474, -0.7071067811865477 ],
	[50, 0.7818314824680297, -0.6234898018587337 ],
	[51, 0.846724199228284, -0.5320320765153368 ],
	[52, 0.9009688679024194, -0.4338837391175575 ],
	[53, 0.9438833303083675, -0.3302790619551673 ],
	[54, 0.9749279121818235, -0.22252093395631464 ],
	[55, 0.9937122098932426, -0.11196447610330809 ],
'''


moltenres_2_xy = [

#nbrs
[ 1, 5, 46 ],
[ 2, 4, 39 ],
[ 3, 12, 38 ],
[ 4, 14, 45 ],
[ 5, 13, 49 ],
[ 6, 21, 33 ],
[ 7, 22, 51 ],
[ 8, 20, 52 ],
[ 9, 28, 53 ],
[ 10, 35, 54 ],
[ 11, 37, 50 ],
[ 12, 44, 47 ],
[ 13, 45, 40 ],
[ 14, 40, 41 ],
[ 15, 46, 24 ],
[ 16, 36, 23 ],
[ 17, 33, 26 ],
[ 18, 51, 3 ],
[ 19, 54, 11 ],
[ 20, 53, 17 ],
[ 21, 52, 15 ],
[ 22, 50, 18 ],
[ 23, 49, 12 ],
[ 24, 41, 6 ],
[ 25, 47, 5 ],
[ 26, 48, 2 ],
[ 27, 42, 1 ],
[ 28, 43, 4 ],
[ 29, 38, 7 ],
[ 30, 39, 8 ],
[ 31, 34, 14 ],
[ 32, 32, 20 ],
[ 33, 29, 13 ],
[ 34, 27, 9 ],
[ 35, 6, 10 ],
[ 36, 7, 16 ],
[ 37, 3, 19 ],
[ 38, 2, 25 ],
[ 39, 1, 21 ],
[ 40, 8, 22 ],
[ 41, 10, 31 ],
[ 42, 11, 37 ],
[ 43, 16, 43 ],
[ 44, 18, 42 ],
[ 45, 15, 48 ],
[ 46, 9, 44 ],
[ 47, 24, 28 ],
[ 48, 26, 34 ],
[ 49, 30, 35 ],
[ 50, 31, 27 ],
[ 51, 25, 29 ],
[ 52, 23, 36 ],
[ 53, 19, 32 ],
[ 54, 17, 30 ],
[ 55, 0, 0 ],
[ 56, 10, 10 ]
]


def create_node(x,y,z):
    bpy.ops.mesh.primitive_cylinder_add(
        radius = R, 
        depth = D,
        location = (x, y, z)   
    ) 
    nodes.append( bpy.context.object )
    


def cylinder_between(x1, y1, z1, x2, y2, z2, r):

  dx = x2 - x1
  dy = y2 - y1
  dz = z2 - z1    
  dist = math.sqrt(dx**2 + dy**2 + dz**2)

  bpy.ops.mesh.primitive_cylinder_add(
      radius = r, 
      depth = dist,
      location = (dx/2 + x1, dy/2 + y1, dz/2 + z1)   
  ) 

  phi = math.atan2(dy, dx) 
  theta = math.acos(dz/dist) 

  bpy.context.object.rotation_euler[1] = theta 
  bpy.context.object.rotation_euler[2] = phi 
  edges.append( bpy.context.object )

def read_file():
    #file = open ( "/home/jack/Desktop/graph_data", "r" );
    file = open ( "/Users/jack/SCP/graph_data", "r" );
    for line in file:
        tokens = re.split(r'\t+', line.rstrip('\t'))
        #print ( len ( tokens ) )
        if tokens[ 0 ] == "node" :
            i = int( tokens[ 1 ] )
            j = int( tokens[ 2 ] )

            if( i >= len(moltenres_2_xy) ):
                print ( "BAD I ")
                continue
            x = scale*moltenres_2_xy[ i ][ 1 ] - 5
            y = scale*moltenres_2_xy[ i ][ 2 ] - 5
            if( j < 25 ):
                create_node( x, y, 2*D*j )
        else :
            i = int( tokens[ 1 ] )
            j = int( tokens[ 2 ] )
            k = int( tokens[ 3 ] )
            l = int( tokens[ 4 ] )

            x = scale*moltenres_2_xy[ i ][ 1 ] - 5
            y = scale*moltenres_2_xy[ i ][ 2 ] - 5
            x2 = scale*moltenres_2_xy[ k ][ 1 ] - 5
            y2 = scale*moltenres_2_xy[ k ][ 2 ] - 5

            if( j < 25 and l < 25 ):
                cylinder_between( x, y, 2*D*j, x2, y2, 2*D*l, R/10 )



def set_materials():
    node_mat = bpy.data.materials.get("Node")
    if node_mat is None:
        node_mat = bpy.data.materials.new(name="Node")

    for node in nodes:
        if node.data.materials:
            node.data.materials[0] = node_mat
        else:
            node.data.materials.append( node_mat )

    edge_mat = bpy.data.materials.get("Edge")
    if edge_mat is None:
        edge_mat = bpy.data.materials.new(name="Edge")

    for edge in edges:
        if edge.data.materials:
            edge.data.materials[0] = edge_mat
        else:
            edge.data.materials.append( edge_mat )
'''
for i in range(0, 56):
    x = 100*moltenres_2_xy[ i ][ 1 ]
    y = 100*moltenres_2_xy[ i ][ 2 ]
    create_node( x, y, 1 )
    cylinder_between( x, y, 1, 0, 0, 0, R/10 )
'''
read_file()

#cylinder_between( 1, 1, 5, 5, 4, 5, R/10 )

#print ( type( nodes[0] ) )

set_materials()
